CREATE DATABASE SmartPitch;
GO

USE SmartPitch;
GO

-- 1. USER ROLES
CREATE TABLE Role (
    RoleID INT IDENTITY PRIMARY KEY,
    RoleName NVARCHAR(50) NOT NULL UNIQUE
);

CREATE TABLE [User] (
    UserID INT IDENTITY PRIMARY KEY,
    Email NVARCHAR(255) NOT NULL UNIQUE,
    PasswordHash NVARCHAR(255) NOT NULL,
    FullName NVARCHAR(100),
    Phone NVARCHAR(20),
    CreatedAt DATETIME DEFAULT GETDATE(),
    IsActive BIT DEFAULT 1,
    GoogleID NVARCHAR(100),
    AvatarUrl NVARCHAR(512),
    DateOfBirth DATE,
    Address NVARCHAR(255)
);
ALTER TABLE [User] ADD FacebookID NVARCHAR(255);

CREATE TABLE UserRole (
    UserID INT NOT NULL,
    RoleID INT NOT NULL,
    PRIMARY KEY (UserID, RoleID),
    FOREIGN KEY (UserID) REFERENCES [User](UserID),
    FOREIGN KEY (RoleID) REFERENCES Role(RoleID)
);

-- 2. STADIUMS
CREATE TABLE Stadium (
    StadiumID INT IDENTITY PRIMARY KEY,
    Name NVARCHAR(100) NOT NULL,
    Location NVARCHAR(255),
    Description NVARCHAR(MAX),
    Status NVARCHAR(20) NOT NULL DEFAULT 'Available',
    CreatedAt DATETIME DEFAULT GETDATE(),
    OwnerID INT,
    PhoneNumber NVARCHAR(20),
    FOREIGN KEY (OwnerID) REFERENCES [User](UserID)
);

-- 3. FIELDS
CREATE TABLE Field (
    FieldID INT IDENTITY PRIMARY KEY,
    StadiumID INT NOT NULL,
    FieldName NVARCHAR(100),
    Type NVARCHAR(50) NOT NULL,
    Description NVARCHAR(MAX),
    FOREIGN KEY (StadiumID) REFERENCES Stadium(StadiumID)
);

-- 4. TIME SLOTS
CREATE TABLE TimeSlot (
    TimeSlotID INT IDENTITY PRIMARY KEY,
    FieldID INT NOT NULL,
    Date DATE NOT NULL,
    StartTime TIME NOT NULL,
    EndTime TIME NOT NULL,
    Price DECIMAL(12,2) NOT NULL,
    isActive BIT DEFAULT 1,
    FOREIGN KEY (FieldID) REFERENCES Field(FieldID)
);

-- 5. DISCOUNT CODES
CREATE TABLE DiscountCode (
    DiscountCodeID INT IDENTITY PRIMARY KEY,
    Code NVARCHAR(50) NOT NULL UNIQUE,
    DiscountPercent INT NOT NULL CHECK (DiscountPercent BETWEEN 0 AND 100),
    ExpiryDate DATE NOT NULL,
    MaxUsage INT NOT NULL DEFAULT 0,
    UsedCount INT NOT NULL DEFAULT 0
);

-- 6. BOOKINGS & PAYMENTS
CREATE TABLE Booking (
    BookingID INT IDENTITY PRIMARY KEY,
    UserID INT NOT NULL,
    DiscountCodeID INT NULL,
    Status NVARCHAR(20) NOT NULL DEFAULT 'Pending',
    CreatedAt DATETIME DEFAULT GETDATE(),
    OriginalAmount DECIMAL(12,2),
    TotalAmount DECIMAL(12,2),
    FOREIGN KEY (UserID) REFERENCES [User](UserID),
    FOREIGN KEY (DiscountCodeID) REFERENCES DiscountCode(DiscountCodeID)
);

SELECT COUNT(*) as total, Status
FROM Stadium
GROUP BY Status;

SELECT COUNT(*) as total, Status
FROM Stadium
GROUP BY Status;

CREATE TABLE BookingTimeSlot (
    BookingID INT NOT NULL,
    TimeSlotID INT NOT NULL,
    PRIMARY KEY (BookingID, TimeSlotID),
    FOREIGN KEY (BookingID) REFERENCES Booking(BookingID),
    FOREIGN KEY (TimeSlotID) REFERENCES TimeSlot(TimeSlotID)
);

CREATE TABLE Payment (
    PaymentID INT IDENTITY PRIMARY KEY,
    BookingID INT NOT NULL,
    PaymentMethod NVARCHAR(50) NOT NULL,
    Amount DECIMAL(12,2) NOT NULL,
    PaymentDate DATETIME DEFAULT GETDATE(),
    Status NVARCHAR(20) NOT NULL,
    TransactionID NVARCHAR(100),
    FOREIGN KEY (BookingID) REFERENCES Booking(BookingID)
);

-- 7. FOOD ITEMS & ORDERS
CREATE TABLE FoodItem (
    FoodItemID INT IDENTITY PRIMARY KEY,
    StadiumID INT NOT NULL,
    Name NVARCHAR(100) NOT NULL,
    Description NVARCHAR(MAX),
    Price DECIMAL(12,2) NOT NULL,
    StockQuantity INT NOT NULL DEFAULT 0,
    IsActive BIT DEFAULT 1,
    ImageUrl NVARCHAR(512),
    FOREIGN KEY (StadiumID) REFERENCES Stadium(StadiumID)
);

CREATE TABLE FoodOrder (
    FoodOrderID INT IDENTITY PRIMARY KEY,
    UserID INT NOT NULL,
    StadiumID INT NOT NULL,
    BookingID INT NULL,
    DiscountCodeID INT NULL,
    Status NVARCHAR(20) NOT NULL DEFAULT 'Pending',
    TotalAmount DECIMAL(12,2) NOT NULL,
    CreatedAt DATETIME DEFAULT GETDATE(),
    FOREIGN KEY (UserID) REFERENCES [User](UserID),
    FOREIGN KEY (StadiumID) REFERENCES Stadium(StadiumID),
    FOREIGN KEY (BookingID) REFERENCES Booking(BookingID),
    FOREIGN KEY (DiscountCodeID) REFERENCES DiscountCode(DiscountCodeID)
);

CREATE TABLE FoodOrderItem (
    FoodOrderItemID INT IDENTITY PRIMARY KEY,
    FoodOrderID INT NOT NULL,
    FoodItemID INT NOT NULL,
    Quantity INT NOT NULL,
    Price DECIMAL(12,2) NOT NULL,
    FOREIGN KEY (FoodOrderID) REFERENCES FoodOrder(FoodOrderID),
    FOREIGN KEY (FoodItemID) REFERENCES FoodItem(FoodItemID)
);

-- 8. TOURNAMENTS
CREATE TABLE Tournament (
    TournamentID INT IDENTITY PRIMARY KEY,
    StadiumID INT NOT NULL,
    Name NVARCHAR(100) NOT NULL,
    Description NVARCHAR(MAX),
    StartDate DATE NOT NULL,
    EndDate DATE NOT NULL,
    CreatedBy INT NOT NULL,
    CreatedAt DATETIME DEFAULT GETDATE(),
    FOREIGN KEY (StadiumID) REFERENCES Stadium(StadiumID),
    FOREIGN KEY (CreatedBy) REFERENCES [User](UserID)
);

CREATE TABLE TournamentTeam (
    TeamID INT IDENTITY PRIMARY KEY,
    TournamentID INT NOT NULL,
    TeamName NVARCHAR(100) NOT NULL,
    CaptainName NVARCHAR(100),
    ContactPhone NVARCHAR(20),
    FOREIGN KEY (TournamentID) REFERENCES Tournament(TournamentID)
);

CREATE TABLE MatchSchedule (
    MatchID INT IDENTITY PRIMARY KEY,
    TournamentID INT NOT NULL,
    TeamAID INT NOT NULL,
    TeamBID INT NOT NULL,
    MatchDate DATE NOT NULL,
    StartTime TIME NOT NULL,
    EndTime TIME NOT NULL,
    Result NVARCHAR(255),
    FOREIGN KEY (TournamentID) REFERENCES Tournament(TournamentID),
    FOREIGN KEY (TeamAID) REFERENCES TournamentTeam(TeamID),
    FOREIGN KEY (TeamBID) REFERENCES TournamentTeam(TeamID)
);

-- 9. REPORTS
CREATE TABLE Report (
    ReportID INT IDENTITY PRIMARY KEY,
    UserID INT NOT NULL,
    RelatedBookingID INT NULL,
    RelatedFoodOrderID INT NULL,
    RelatedStadiumID INT NULL,
    Title NVARCHAR(200) NOT NULL,
    Description NVARCHAR(MAX) NOT NULL,
    SubmittedAt DATETIME DEFAULT GETDATE(),
    Status NVARCHAR(20) NOT NULL DEFAULT 'Pending',
    AdminResponse NVARCHAR(MAX),
    RespondedAt DATETIME NULL,
    FOREIGN KEY (UserID) REFERENCES [User](UserID),
    FOREIGN KEY (RelatedBookingID) REFERENCES Booking(BookingID),
    FOREIGN KEY (RelatedFoodOrderID) REFERENCES FoodOrder(FoodOrderID),
    FOREIGN KEY (RelatedStadiumID) REFERENCES Stadium(StadiumID),
    CONSTRAINT CHK_Report_Status CHECK (Status IN ('Pending', 'In Progress', 'Resolved', 'Rejected'))
);

-- 10. OWNER REQUESTS
CREATE TABLE OwnerRequest (
    RequestID INT IDENTITY PRIMARY KEY,
    UserID INT NOT NULL,
    FullName NVARCHAR(100),
    Email NVARCHAR(255),
    PhoneNumber NVARCHAR(20),
    Message NVARCHAR(MAX),
    SubmittedDate DATETIME DEFAULT GETDATE(),
    Status NVARCHAR(20) DEFAULT 'Pending',
    AdminNote NVARCHAR(MAX),
    BusinessLicense NVARCHAR(255) NULL,
    FOREIGN KEY (UserID) REFERENCES [User](UserID)
);

CREATE TABLE Messages (
    MessageID INT PRIMARY KEY IDENTITY(1,1),
    SenderID INT NOT NULL,
    RecipientID INT NOT NULL,
    Content NVARCHAR(MAX) NOT NULL,
    Timestamp DATETIME DEFAULT GETDATE(),
    IsRead BIT DEFAULT 0,
    FOREIGN KEY (SenderID) REFERENCES [User](UserID),
    FOREIGN KEY (RecipientID) REFERENCES [User](UserID)
);

-- 11. STORED PROCEDURE
GO
CREATE PROCEDURE AutoGenerateTimeSlots
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @Today DATE = CAST(GETDATE() AS DATE);

    -- Delete old unbooked time slots
    DELETE FROM TimeSlot
    WHERE Date < @Today
      AND TimeSlotID NOT IN (
          SELECT TimeSlotID FROM BookingTimeSlot
      );

    -- Generate new time slots for the next 30 days for each field
    DECLARE @FieldID INT;
    DECLARE field_cursor CURSOR FOR
        SELECT FieldID FROM Field;

    OPEN field_cursor;
    FETCH NEXT FROM field_cursor INTO @FieldID;

    WHILE @@FETCH_STATUS = 0
    BEGIN
        DECLARE @i INT = 0;
        WHILE @i < 30
        BEGIN
            DECLARE @date DATE = DATEADD(DAY, @i, @Today);
            DECLARE @startTime TIME = '06:00';
            DECLARE @endTime TIME = '21:00';
            DECLARE @cur TIME = @startTime;

            WHILE (@cur < @endTime)
            BEGIN
                -- Check if time slot already exists
                IF NOT EXISTS (
                    SELECT 1 FROM TimeSlot 
                    WHERE FieldID = @FieldID AND Date = @date 
                      AND StartTime = @cur AND EndTime = DATEADD(HOUR, 1, @cur)
                )
                BEGIN
                    INSERT INTO TimeSlot (FieldID, Date, StartTime, EndTime, Price, isActive)
                    VALUES (@FieldID, @date, @cur, DATEADD(HOUR, 1, @cur), 150000, 1);
                END
                SET @cur = DATEADD(HOUR, 1, @cur);
            END
            SET @i = @i + 1;
        END
        FETCH NEXT FROM field_cursor INTO @FieldID;
    END

    CLOSE field_cursor;
    DEALLOCATE field_cursor;
END;
GO

-- Execute the stored procedure
EXEC AutoGenerateTimeSlots;
GO

-- 1. Insert Roles
INSERT INTO Role (RoleName)
VALUES ('Admin'), ('Owner'), ('User');

-- 2. Insert Users
INSERT INTO [User] (Email, PasswordHash, FullName, Phone, IsActive)
VALUES 
('admin@example.com', 'hashed_admin', 'Admin', '0900000000', 1),
('owner1@example.com', 'hashed_owner1', 'Owner 1', '0900000001', 1),
('owner2@example.com', 'hashed_owner2', 'Owner 2', '0900000002', 1),
('user1@example.com', 'hashed_user1', 'User 1', '0900000003', 1),
('user2@example.com', 'hashed_user2', 'User 2', '0900000004', 1);

INSERT INTO UserRole (UserID, RoleID)
VALUES (7, 1);

-- Assign 'Owner' role to UserID 8
INSERT INTO UserRole (UserID, RoleID)
VALUES (8, 2);

-- Assign 'User' role to UserID 9
INSERT INTO UserRole (UserID, RoleID)
VALUES (9, 3);


-- Verify Users
SELECT UserID, Email, FullName FROM [User];

-- 3. Insert User Roles
INSERT INTO UserRole (UserID, RoleID)
SELECT U.UserID, R.RoleID 
FROM [User] U
JOIN Role R ON 
    (U.Email = 'admin@example.com' AND R.RoleName = 'Admin') OR
    (U.Email IN ('owner1@example.com', 'owner2@example.com') AND R.RoleName = 'Owner') OR
    (U.Email IN ('user1@example.com', 'user2@example.com') AND R.RoleName = 'User');

-- Verify User Roles
SELECT UserID, RoleID FROM UserRole;

-- 4. Insert Stadiums
INSERT INTO Stadium (Name, Location, Description, OwnerID, PhoneNumber)
SELECT 'Stadium A', 'Hanoi', 'Central stadium', UserID, '0901111111'
FROM [User] WHERE Email = 'owner1@example.com';

INSERT INTO Stadium (Name, Location, Description, OwnerID, PhoneNumber)
SELECT 'Stadium B', 'Ho Chi Minh City', 'District 1 stadium', UserID, '0902222222'
FROM [User] WHERE Email = 'owner2@example.com';

-- Verify Stadiums
SELECT StadiumID, Name, OwnerID FROM Stadium;

SELECT * FROM Stadium;

-- 5. Insert Fields
INSERT INTO Field (StadiumID, FieldName, Type, Description)
VALUES 
(5, 'Field A - 5-a-side', '5-a-side', 'Small field'),
(6, 'Field A - 7-a-side', '7-a-side', 'Medium field'),
(7, 'Field B - 11-a-side', '11-a-side', 'Large field');

-- Verify Fields
SELECT FieldID, StadiumID, FieldName, Type FROM Field;

-- 6. Insert Time Slots (1-hour slots from 06:00 to 21:00 for FieldID = 1)
DECLARE @startTime TIME = '06:00';
DECLARE @endTime TIME = '21:00';
DECLARE @cur TIME = @startTime;
WHILE (@cur < @endTime)
BEGIN
    INSERT INTO TimeSlot (FieldID, Date, StartTime, EndTime, Price, isActive)
    VALUES (4, '2025-06-17', @cur, DATEADD(HOUR, 1, @cur), 150000, 1);
    SET @cur = DATEADD(HOUR, 1, @cur);
END;

-- Additional Time Slots for FieldID = 2, 3
INSERT INTO TimeSlot (FieldID, Date, StartTime, EndTime, Price, isActive)
VALUES 
(4, '2025-06-17', '07:00', '08:00', 200000, 1),
(5, '2025-06-17', '08:00', '09:00', 400000, 1);

-- Verify Time Slots
SELECT TimeSlotID, FieldID, Date, StartTime, EndTime, Price FROM TimeSlot;

-- 7. Insert Discount Codes
INSERT INTO DiscountCode (Code, DiscountPercent, ExpiryDate, MaxUsage)
VALUES 
('DISC10', 10, '2025-12-31', 100),
('DISC20', 20, '2025-12-31', 50);

-- Verify Discount Codes
SELECT DiscountCodeID, Code, DiscountPercent FROM DiscountCode;

-- 8. Insert Booking
INSERT INTO Booking (UserID, DiscountCodeID, Status, OriginalAmount, TotalAmount)
SELECT U.UserID, D.DiscountCodeID, 'Confirmed', 300000, 270000
FROM [User] U
JOIN DiscountCode D ON U.Email = 'user1@example.com' AND D.Code = 'DISC10';

-- Store BookingID
DECLARE @bookingID INT = SCOPE_IDENTITY();

-- Verify Booking
SELECT BookingID, UserID, DiscountCodeID, Status, TotalAmount FROM Booking;

-- 9. Insert Booking Time Slots
INSERT INTO BookingTimeSlot (BookingID, TimeSlotID)
VALUES 
(4, 33),
(5, 34);

-- Verify Booking Time Slots
SELECT BookingID, TimeSlotID FROM BookingTimeSlot;

-- 10. Insert Payment
INSERT INTO Payment (BookingID, PaymentMethod, Amount, Status, TransactionID)
VALUES 
(4, 'VNPay', 270000, 'Completed', 'TXN123456');

-- Verify Payment
SELECT PaymentID, BookingID, PaymentMethod, Amount, Status FROM Payment;

-- 11. Insert Food Items
INSERT INTO FoodItem (StadiumID, Name, Description, Price, StockQuantity, IsActive, ImageUrl)
VALUES 
(5, 'Mineral Water', '500ml bottle', 10000, 100, 1, NULL),
(6, 'Grilled Pork Banh Mi', 'Banh mi with grilled pork', 20000, 50, 1, NULL);

-- Verify Food Items
SELECT FoodItemID, StadiumID, Name, Price FROM FoodItem;

-- 12. Insert Food Order
INSERT INTO FoodOrder (UserID, StadiumID, BookingID, DiscountCodeID, Status, TotalAmount)
SELECT U.UserID, 5, 4, NULL, 'Confirmed', 40000 -- Sử dụng StadiumID = 5 và BookingID = 4
FROM [User] U WHERE U.Email = 'user1@example.com';

-- Store FoodOrderID
DECLARE @foodOrderID INT = SCOPE_IDENTITY();

-- Verify Food Order
SELECT FoodOrderID, UserID, StadiumID, BookingID, TotalAmount FROM FoodOrder;

-- 13. Insert Food Order Items
INSERT INTO FoodOrderItem (FoodOrderID, FoodItemID, Quantity, Price)
SELECT @foodOrderID, FoodItemID, 2, 20000
FROM FoodItem WHERE Name = 'Mineral Water'
UNION
SELECT @foodOrderID, FoodItemID, 1, 20000
FROM FoodItem WHERE Name = 'Grilled Pork Banh Mi';

-- Verify Food Order Items
SELECT FoodOrderItemID, FoodOrderID, FoodItemID, Quantity, Price FROM FoodOrderItem;

-- 14. Insert Tournament
INSERT INTO Tournament (StadiumID, Name, Description, StartDate, EndDate, CreatedBy)
SELECT 5, 'Summer Tournament 2025', 'For amateur teams', '2025-07-01', '2025-07-10', UserID
FROM [User] WHERE Email = 'owner1@example.com';

-- Verify Tournament
SELECT TournamentID, StadiumID, Name, StartDate FROM Tournament;

-- 15. Insert Tournament Teams
INSERT INTO TournamentTeam (TournamentID, TeamName, CaptainName, ContactPhone)
VALUES 
(3, 'Team Alpha', 'Anh A', '0901234567'),
(3, 'Team Beta', 'Anh B', '0907654321');

-- Verify Tournament Teams
SELECT TeamID, TournamentID, TeamName FROM TournamentTeam;

-- 16. Insert Match Schedule
INSERT INTO MatchSchedule (TournamentID, TeamAID, TeamBID, MatchDate, StartTime, EndTime)
VALUES 
(3, 3, 4, '2025-07-02', '08:00', '09:00');

-- Verify Match Schedule
SELECT MatchID, TournamentID, TeamAID, TeamBID, MatchDate FROM MatchSchedule;